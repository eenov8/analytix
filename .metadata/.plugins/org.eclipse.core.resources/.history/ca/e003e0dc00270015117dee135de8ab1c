package bigdata.datascraper.flipkart;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.Mongo;

public class TestFlipkart {
	public static void main(String[] args) throws Exception {
        
		Mongo mongo = new Mongo("localhost", 27017);
		DB db = mongo.getDB("analytix");
		DBCollection collection = db.getCollection("products");
		

		// Instantiate the full fledged FF selenium webdriver object. 
        WebDriver driver = new FirefoxDriver();
        
        // Load up the Flipkart's home page.
        driver.get("http://www.flipkart.com");
        
        // Enter the query string "whatever", 
        // this will soon be replaced with strings added 
        // in a csv file
        WebElement query = driver.findElement(By.id("fk-top-search-box"));
        //Send search query to the top search bar.
        query.sendKeys("samsung galaxy");
        
        //Submit the search form now.
        driver.findElement(By.id("fk-header-search-form")).submit();
        
        //Temporary Link -
        //driver.get("http://www.flipkart.com/sports-fitness/fitness-accessories/accessories/yoga-straps/pr?sid=dep%2Cxnh%2Ccsz%2Cznc&filterNone=true&q=yoga+mat");
        
        int pullThePlug = 0;
        //On the resulting page, load up all the elements with class as pu-title
        List<WebElement> lstProducts = driver.findElements(By.className("pu-title"));
        for (WebElement webElement : lstProducts) {
        	if(pullThePlug == 0) {
	        	//Create a JSON document in form of Java Map. This will be persisted by the end of this loop.
	        	//HashMaps in Java will be persisted as embedded documents.
	        	//Array as embedded array and finally a key-value as a single key-value.
	        	Map<String, Object> documentMap = new HashMap<String, Object>();
	    		documentMap.put("source", "flipkart");
	    		/*Map<String, Object> documentMapDetail = new HashMap<String, Object>();
	    		documentMapDetail.put("records", "99");
	    		documentMapDetail.put("index", "vps_index1");
	    		documentMapDetail.put("active", "true");    	 
	    		documentMap.put("detail", documentMapDetail);*/
	    		
	    		
	        	//Not interested in the title from this page, the product link will be fetched and opened individually for complete details.
	        	WebElement aLink = webElement.findElement(By.xpath(".//a"));
	        	String aHref = aLink.getAttribute("href");
	        	
	        	//Instantiate a child driver per product in the search page
	        	WebDriver driver_prod = new FirefoxDriver();
	        	driver_prod.get(aHref);
	        	
	        	//Fetch Product Details
	        	WebElement productTitle = driver_prod.findElement(By.className("title"));
	        	WebElement productTitleXpath = driver_prod.findElement(By.xpath("//h1[@class='title']"));
	        	WebElement productSubTitle = driver_prod.findElement(By.className("subtitle"));
	        	WebElement productPrice = driver_prod.findElement(By.className("selling-price"));
	        	WebElement sellerName = driver_prod.findElement(By.className("seller-name"));
	        	WebElement sellerRating = driver_prod.findElement(By.className("rating-out-of-five"));
	        	
	        	List<WebElement> productFeatures = driver.findElements(By.className("keyFeaturesList")); 
	        	ArrayList<String> productFeaturesArrayList = new ArrayList<String>();
	        	for (WebElement feature: productFeatures) {
	        		productFeaturesArrayList.add(feature.getText());
	        	}
	        	//Add the title as a k-v pair in our JSON document
	        	documentMap.put("product_title", productTitle.getText());
	        	documentMap.put("product_subTitle", productSubTitle.getText());
	        	documentMap.put("product_price", productPrice.getText());
	        	documentMap.put("primary_seller_name", sellerName.getText());
	        	documentMap.put("primary_seller_rating", sellerRating.getText());
	        	documentMap.put("product_main_features", productFeaturesArrayList.toArray());
	        	
	        	//Might not be needed, has to be cleaned up eventually.
	        	//WebElement productPrice = driver.findElement(By.className("selling-price "));
	            //WebElement productSeller = driver.findElement(By.className("seller-name"));
	            
	        	//Since the sellers information is loaded only after clicking the small hyperlink which says load N sellers
	        	//Clicking the above link is required to fetch the complete details.
				try {
					WebElement loadNextA = driver_prod.findElement(By
							.className("t-load-next"));
					if (loadNextA != null)
						loadNextA.click();
				} catch (NoSuchElementException ex) {
					System.out.println(ex.toString());
				} catch (ElementNotVisibleException ex) {
					System.out.println(ex.toString());
				}
				
	            //Seller-wise price information is present in a data table with class name "seller-table"
	            //We will be iterating all the rows and corresponding columns to fetch these details.
	    		try {
					WebElement htmltable = driver_prod.findElement(By
		    				.xpath("//div[contains(@class, 'seller-table')]/table[1]/tbody"));
		
		    		if(htmltable != null){
			    		List<WebElement> rows = htmltable.findElements(By.tagName("tr"));
			    		
			    		//Map to create the embedded doc (seller name: selling price)
			    		Map<String, String> documentMapDetail = new HashMap<String, String>();
			    		for (int rnum = 0; rnum < rows.size(); rnum++)
			    		{
			    			List<WebElement> columns = rows.get(rnum).findElements(
			    					By.tagName("td"));
			    			String supplierName = "";
			    			String suppliedPrice = "";
			    			for (int cnum = 0; cnum < columns.size(); cnum++)
			    			{
			    				//This is the point where the data has to go into a JSON object that can be later on persisted into the MongoDB.
			    				if(cnum == 0)
			    					supplierName = columns.get(cnum).getText().split("\\?")[0].split("\n")[0];			    					
			    				if(cnum == 4)
			    					suppliedPrice = columns.get(cnum).getText().split("\\?")[0].split("\n")[0];
			    					
			    			}
			    			documentMapDetail.put(supplierName, suppliedPrice);
			    		}
			    		//Adding the embedded doc to the original document. 
			    		documentMap.put("prices", documentMapDetail);
		    		}
	    		} catch(NoSuchElementException ex) {
	    			System.out.println(ex.toString());
	    		} catch (ElementNotVisibleException ex) {
					System.out.println(ex.toString());
				}
	    		
	            //System.out.println(productTitle.getText());
	        	
	            //Add product to MongoDB
	            collection.insert(new BasicDBObject(documentMap));
	        	driver_prod.quit();
	        	
	        	pullThePlug = -1;
        	}
 		}
        driver.quit();
    }
}
